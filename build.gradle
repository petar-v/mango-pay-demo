plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.4"
    id("io.micronaut.test-resources") version "4.4.4"
    id("io.micronaut.aot") version "4.4.4"
}

version = "0.1"
group = "org.flutterbit.mangopay.demo"

repositories {
    mavenCentral()
}

dependencies {
    // Annotation processors for Micronaut framework features
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")

    // Micronaut HTTP client for making external requests
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")

    // Micronaut Data for JPA and Hibernate integration
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")

    // Micronaut GraphQL for GraphQL API support
    implementation("io.micronaut.graphql:micronaut-graphql")

    // Micronaut Security for authentication and JWT
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")

    // Micronaut serialization and deserialization support
    implementation("io.micronaut.serde:micronaut-serde-jackson")

    // Micronaut SQL with Hikari connection pooling
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")

    // Validation APIs for input validation
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.validation:jakarta.validation-api")

    // OpenAPI annotations for API documentation
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")

    // Runtime dependencies for logging
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation('commons-logging:commons-logging:1.2')

    // Test dependencies
    testImplementation("org.hamcrest:hamcrest")
    testImplementation("org.mockito:mockito-core")
    aotPlugins platform("io.micronaut.platform:micronaut-platform:4.7.1")

    // Micronaut AOT dependencies for advanced optimizations
    aotPlugins platform("io.micronaut.platform:micronaut-platform")
    aotPlugins("io.micronaut.security:micronaut-security-aot")

    // Lombok for reducing boilerplate code
    implementation "org.projectlombok:lombok:1.18.30"
    annotationProcessor "org.projectlombok:lombok:1.18.30"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.30"
    testImplementation "org.projectlombok:lombok:1.18.30"

    // SQLite and Flyway for database management
    implementation("org.xerial:sqlite-jdbc:3.43.2.0")
    runtimeOnly("org.xerial:sqlite-jdbc:3.43.2.0")
    implementation("org.hibernate.orm:hibernate-community-dialects:6.2.0.Final")
    implementation("org.flywaydb:flyway-core:9.2.3")
    implementation("io.micronaut.flyway:micronaut-flyway")

    // Password encoding using BCrypt
    implementation("io.micronaut.security:micronaut-security")
    implementation('org.springframework.security:spring-security-crypto:6.3.3')

    // Micronaut Views
    // Templating engine - Thymeleaf
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
}

application {
    mainClass = "org.flutterbit.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.flutterbit.mangopay.demo.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
        configurationProperties.put("micronaut.security.jwks.enabled", "false")
        configurationProperties.put("micronaut.security.openid-configuration.enabled", "false")
    }
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}
